# Backend Workflow
# Ce fichier de configuration GitHub Actions permet de définir un workflow pour automatiser les processus
# d'intégration et de déploiement continu (CI/CD) pour le dossier backend de BobApp. Il est déclenché lors de
# pushs sur une branch dev  et de pull requests sur une branch main.

name: Backend Workflow

on:
  push:
    branches:
      - main

  # Déclenche le workflow lors d'une pull request vers la branche "main" dans le dossier "back"
  pull_request:
    branches:
      - main
    paths:
      - 'back/**'

jobs:
  # Job pour la construction, les tests, le rapport de couverture, et l'analyse SonarCloud
  Build_Test_Coverage_Analyse:
    runs-on: ubuntu-latest

    # Définition du répertoire de travail par défaut
    defaults:
      run:
        working-directory: back

    steps:
      # Étape 1 : Check-out du code source du dépôt
      - name: Checkout code
        uses: actions/checkout@v3
        with:
         fetch-depth: 0

      # Étape 2 : Configuration de Java JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: maven

      # Étape 3 : Mise en cache des packages Maven pour accélérer les builds successifs
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 4 : Exécution des tests et génération du rapport de couverture JaCoCo
      - name: Run tests and generate JaCoCo coverage report
        run: mvn -B clean test

      # Étape 5 : Archivage du rapport de couverture pour être accessible depuis GitHub
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage_backend
          path: ${{ github.workspace }}/back/target/site/jacoco

      # Étape 6 : Mise en cache des packages SonarCloud pour optimiser l'analyse
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Étape 7 : Construction et analyse de code avec SonarCloud pour évaluer la qualité du code
      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=mydmoov_sonarcloud-p10-back -f pom.xml

  # Job secondaire pour la création et le push de l'image Docker du backend
  DockerLogAndBuild:
    # Condition : Exécute ce job uniquement pour une pull request vers la branche "main"
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    # Utilise également une image Ubuntu
    runs-on: ubuntu-latest

    # Ce job dépend de la complétion du job "Build_Test_Coverage_Analyse"
    needs: Build_Test_Coverage_Analyse

    # Définition du répertoire de travail par défaut
    defaults:
      run:
        working-directory: ${{ github.workspace }}/back

    steps:
      # Étape 1 : Check-out du code source pour le job Docker
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Mise en cache des couches Docker pour accélérer les builds successifs
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Étape 3 : Connexion à Docker Hub avec les informations d'authentification stockées dans les secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}

      # Étape 4 : Construction et push de l'image Docker du backend vers Docker Hub
      - name: Build and push backend Docker image
        run: |
          docker build -t bobapp-back .
          docker tag bobapp-back ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest
